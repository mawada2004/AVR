
SWITCH.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b1e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000b1e  00000b92  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000010b0  00000000  00000000  00000b9c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000ab6  00000000  00000000  00001c4c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e1       	ldi	r30, 0x1E	; 30
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 c7 04 	call	0x98e	; 0x98e <main>
  7a:	0c 94 8d 05 	jmp	0xb1a	; 0xb1a <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_enuInit>:
  82:	df 93       	push	r29
  84:	cf 93       	push	r28
  86:	0f 92       	push	r0
  88:	cd b7       	in	r28, 0x3d	; 61
  8a:	de b7       	in	r29, 0x3e	; 62
  8c:	81 e0       	ldi	r24, 0x01	; 1
  8e:	89 83       	std	Y+1, r24	; 0x01
  90:	ea e3       	ldi	r30, 0x3A	; 58
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	8e ef       	ldi	r24, 0xFE	; 254
  96:	80 83       	st	Z, r24
  98:	e7 e3       	ldi	r30, 0x37	; 55
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	8f ef       	ldi	r24, 0xFF	; 255
  9e:	80 83       	st	Z, r24
  a0:	e4 e3       	ldi	r30, 0x34	; 52
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	8f ef       	ldi	r24, 0xFF	; 255
  a6:	80 83       	st	Z, r24
  a8:	e1 e3       	ldi	r30, 0x31	; 49
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	8f ef       	ldi	r24, 0xFF	; 255
  ae:	80 83       	st	Z, r24
  b0:	eb e3       	ldi	r30, 0x3B	; 59
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	89 ea       	ldi	r24, 0xA9	; 169
  b6:	80 83       	st	Z, r24
  b8:	e8 e3       	ldi	r30, 0x38	; 56
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	8e ef       	ldi	r24, 0xFE	; 254
  be:	80 83       	st	Z, r24
  c0:	e5 e3       	ldi	r30, 0x35	; 53
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	10 82       	st	Z, r1
  c6:	e2 e3       	ldi	r30, 0x32	; 50
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	89 ea       	ldi	r24, 0xA9	; 169
  cc:	80 83       	st	Z, r24
  ce:	19 82       	std	Y+1, r1	; 0x01
  d0:	89 81       	ldd	r24, Y+1	; 0x01
  d2:	0f 90       	pop	r0
  d4:	cf 91       	pop	r28
  d6:	df 91       	pop	r29
  d8:	08 95       	ret

000000da <DIO_enuSet_Port_Dir>:
   Local_enuErrorState =ES_OK;
   return Local_enuErrorState;
}

ES_t DIO_enuSet_Port_Dir(u8 Copy_u8PortID , u8 Copy_u8Value )
{
  da:	df 93       	push	r29
  dc:	cf 93       	push	r28
  de:	00 d0       	rcall	.+0      	; 0xe0 <DIO_enuSet_Port_Dir+0x6>
  e0:	00 d0       	rcall	.+0      	; 0xe2 <DIO_enuSet_Port_Dir+0x8>
  e2:	0f 92       	push	r0
  e4:	cd b7       	in	r28, 0x3d	; 61
  e6:	de b7       	in	r29, 0x3e	; 62
  e8:	8a 83       	std	Y+2, r24	; 0x02
  ea:	6b 83       	std	Y+3, r22	; 0x03
   ES_t Local_enuErrorState=ES_NOK;
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	89 83       	std	Y+1, r24	; 0x01
   if (Copy_u8PortID<=DIO_PORTD && Copy_u8Value<=OUTPUT)
  f0:	8a 81       	ldd	r24, Y+2	; 0x02
  f2:	84 30       	cpi	r24, 0x04	; 4
  f4:	b8 f5       	brcc	.+110    	; 0x164 <DIO_enuSet_Port_Dir+0x8a>
  f6:	8b 81       	ldd	r24, Y+3	; 0x03
  f8:	82 30       	cpi	r24, 0x02	; 2
  fa:	a0 f5       	brcc	.+104    	; 0x164 <DIO_enuSet_Port_Dir+0x8a>
   {
	   switch(Copy_u8PortID)
  fc:	8a 81       	ldd	r24, Y+2	; 0x02
  fe:	28 2f       	mov	r18, r24
 100:	30 e0       	ldi	r19, 0x00	; 0
 102:	3d 83       	std	Y+5, r19	; 0x05
 104:	2c 83       	std	Y+4, r18	; 0x04
 106:	8c 81       	ldd	r24, Y+4	; 0x04
 108:	9d 81       	ldd	r25, Y+5	; 0x05
 10a:	81 30       	cpi	r24, 0x01	; 1
 10c:	91 05       	cpc	r25, r1
 10e:	d1 f0       	breq	.+52     	; 0x144 <DIO_enuSet_Port_Dir+0x6a>
 110:	2c 81       	ldd	r18, Y+4	; 0x04
 112:	3d 81       	ldd	r19, Y+5	; 0x05
 114:	22 30       	cpi	r18, 0x02	; 2
 116:	31 05       	cpc	r19, r1
 118:	2c f4       	brge	.+10     	; 0x124 <DIO_enuSet_Port_Dir+0x4a>
 11a:	8c 81       	ldd	r24, Y+4	; 0x04
 11c:	9d 81       	ldd	r25, Y+5	; 0x05
 11e:	00 97       	sbiw	r24, 0x00	; 0
 120:	61 f0       	breq	.+24     	; 0x13a <DIO_enuSet_Port_Dir+0x60>
 122:	1e c0       	rjmp	.+60     	; 0x160 <DIO_enuSet_Port_Dir+0x86>
 124:	2c 81       	ldd	r18, Y+4	; 0x04
 126:	3d 81       	ldd	r19, Y+5	; 0x05
 128:	22 30       	cpi	r18, 0x02	; 2
 12a:	31 05       	cpc	r19, r1
 12c:	81 f0       	breq	.+32     	; 0x14e <DIO_enuSet_Port_Dir+0x74>
 12e:	8c 81       	ldd	r24, Y+4	; 0x04
 130:	9d 81       	ldd	r25, Y+5	; 0x05
 132:	83 30       	cpi	r24, 0x03	; 3
 134:	91 05       	cpc	r25, r1
 136:	81 f0       	breq	.+32     	; 0x158 <DIO_enuSet_Port_Dir+0x7e>
 138:	13 c0       	rjmp	.+38     	; 0x160 <DIO_enuSet_Port_Dir+0x86>
	   {
	      case DIO_PORTA:
	    	  DDRA=Copy_u8Value;
 13a:	ea e3       	ldi	r30, 0x3A	; 58
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	8b 81       	ldd	r24, Y+3	; 0x03
 140:	80 83       	st	Z, r24
 142:	0e c0       	rjmp	.+28     	; 0x160 <DIO_enuSet_Port_Dir+0x86>
			  break;
	      case DIO_PORTB:
	    	  DDRB=Copy_u8Value;
 144:	e7 e3       	ldi	r30, 0x37	; 55
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	8b 81       	ldd	r24, Y+3	; 0x03
 14a:	80 83       	st	Z, r24
 14c:	09 c0       	rjmp	.+18     	; 0x160 <DIO_enuSet_Port_Dir+0x86>
			  break;
	      case DIO_PORTC:
	    	  DDRC=Copy_u8Value;
 14e:	e4 e3       	ldi	r30, 0x34	; 52
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	8b 81       	ldd	r24, Y+3	; 0x03
 154:	80 83       	st	Z, r24
 156:	04 c0       	rjmp	.+8      	; 0x160 <DIO_enuSet_Port_Dir+0x86>
			  break;
	      case DIO_PORTD:
	    	  DDRD=Copy_u8Value;
 158:	e1 e3       	ldi	r30, 0x31	; 49
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	8b 81       	ldd	r24, Y+3	; 0x03
 15e:	80 83       	st	Z, r24
			  break;
	   }
	   Local_enuErrorState = ES_OK;
 160:	19 82       	std	Y+1, r1	; 0x01
 162:	02 c0       	rjmp	.+4      	; 0x168 <DIO_enuSet_Port_Dir+0x8e>
   }
   else
   {
	   Local_enuErrorState=ES_OUT_OF_RANGE;
 164:	82 e0       	ldi	r24, 0x02	; 2
 166:	89 83       	std	Y+1, r24	; 0x01
   }

   return Local_enuErrorState;
 168:	89 81       	ldd	r24, Y+1	; 0x01
}
 16a:	0f 90       	pop	r0
 16c:	0f 90       	pop	r0
 16e:	0f 90       	pop	r0
 170:	0f 90       	pop	r0
 172:	0f 90       	pop	r0
 174:	cf 91       	pop	r28
 176:	df 91       	pop	r29
 178:	08 95       	ret

0000017a <DIO_enuSet_Port_Val>:

ES_t DIO_enuSet_Port_Val(u8 Copy_u8PortID,u8 Copy_u8Value)
{
 17a:	df 93       	push	r29
 17c:	cf 93       	push	r28
 17e:	00 d0       	rcall	.+0      	; 0x180 <DIO_enuSet_Port_Val+0x6>
 180:	00 d0       	rcall	.+0      	; 0x182 <DIO_enuSet_Port_Val+0x8>
 182:	0f 92       	push	r0
 184:	cd b7       	in	r28, 0x3d	; 61
 186:	de b7       	in	r29, 0x3e	; 62
 188:	8a 83       	std	Y+2, r24	; 0x02
 18a:	6b 83       	std	Y+3, r22	; 0x03
	   ES_t Local_enuErrorState=ES_NOK;
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	89 83       	std	Y+1, r24	; 0x01

	      if (Copy_u8PortID<=DIO_PORTD && Copy_u8Value<=OUTPUT)
 190:	8a 81       	ldd	r24, Y+2	; 0x02
 192:	84 30       	cpi	r24, 0x04	; 4
 194:	b8 f5       	brcc	.+110    	; 0x204 <DIO_enuSet_Port_Val+0x8a>
 196:	8b 81       	ldd	r24, Y+3	; 0x03
 198:	82 30       	cpi	r24, 0x02	; 2
 19a:	a0 f5       	brcc	.+104    	; 0x204 <DIO_enuSet_Port_Val+0x8a>
	      {
	   	   switch(Copy_u8PortID)
 19c:	8a 81       	ldd	r24, Y+2	; 0x02
 19e:	28 2f       	mov	r18, r24
 1a0:	30 e0       	ldi	r19, 0x00	; 0
 1a2:	3d 83       	std	Y+5, r19	; 0x05
 1a4:	2c 83       	std	Y+4, r18	; 0x04
 1a6:	8c 81       	ldd	r24, Y+4	; 0x04
 1a8:	9d 81       	ldd	r25, Y+5	; 0x05
 1aa:	81 30       	cpi	r24, 0x01	; 1
 1ac:	91 05       	cpc	r25, r1
 1ae:	d1 f0       	breq	.+52     	; 0x1e4 <DIO_enuSet_Port_Val+0x6a>
 1b0:	2c 81       	ldd	r18, Y+4	; 0x04
 1b2:	3d 81       	ldd	r19, Y+5	; 0x05
 1b4:	22 30       	cpi	r18, 0x02	; 2
 1b6:	31 05       	cpc	r19, r1
 1b8:	2c f4       	brge	.+10     	; 0x1c4 <DIO_enuSet_Port_Val+0x4a>
 1ba:	8c 81       	ldd	r24, Y+4	; 0x04
 1bc:	9d 81       	ldd	r25, Y+5	; 0x05
 1be:	00 97       	sbiw	r24, 0x00	; 0
 1c0:	61 f0       	breq	.+24     	; 0x1da <DIO_enuSet_Port_Val+0x60>
 1c2:	1e c0       	rjmp	.+60     	; 0x200 <DIO_enuSet_Port_Val+0x86>
 1c4:	2c 81       	ldd	r18, Y+4	; 0x04
 1c6:	3d 81       	ldd	r19, Y+5	; 0x05
 1c8:	22 30       	cpi	r18, 0x02	; 2
 1ca:	31 05       	cpc	r19, r1
 1cc:	81 f0       	breq	.+32     	; 0x1ee <DIO_enuSet_Port_Val+0x74>
 1ce:	8c 81       	ldd	r24, Y+4	; 0x04
 1d0:	9d 81       	ldd	r25, Y+5	; 0x05
 1d2:	83 30       	cpi	r24, 0x03	; 3
 1d4:	91 05       	cpc	r25, r1
 1d6:	81 f0       	breq	.+32     	; 0x1f8 <DIO_enuSet_Port_Val+0x7e>
 1d8:	13 c0       	rjmp	.+38     	; 0x200 <DIO_enuSet_Port_Val+0x86>
	   	   {
	   	      case DIO_PORTA:
	   	    	  PORTA=Copy_u8Value;
 1da:	eb e3       	ldi	r30, 0x3B	; 59
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
 1de:	8b 81       	ldd	r24, Y+3	; 0x03
 1e0:	80 83       	st	Z, r24
 1e2:	0e c0       	rjmp	.+28     	; 0x200 <DIO_enuSet_Port_Val+0x86>
	   			  break;
	   	      case DIO_PORTB:
	   	    	  PORTB=Copy_u8Value;
 1e4:	e8 e3       	ldi	r30, 0x38	; 56
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
 1e8:	8b 81       	ldd	r24, Y+3	; 0x03
 1ea:	80 83       	st	Z, r24
 1ec:	09 c0       	rjmp	.+18     	; 0x200 <DIO_enuSet_Port_Val+0x86>
	   			  break;
	   	      case DIO_PORTC:
	   	    	  PORTC=Copy_u8Value;
 1ee:	e5 e3       	ldi	r30, 0x35	; 53
 1f0:	f0 e0       	ldi	r31, 0x00	; 0
 1f2:	8b 81       	ldd	r24, Y+3	; 0x03
 1f4:	80 83       	st	Z, r24
 1f6:	04 c0       	rjmp	.+8      	; 0x200 <DIO_enuSet_Port_Val+0x86>
	   			  break;
	   	      case DIO_PORTD:
	   	    	  PORTD=Copy_u8Value;
 1f8:	e2 e3       	ldi	r30, 0x32	; 50
 1fa:	f0 e0       	ldi	r31, 0x00	; 0
 1fc:	8b 81       	ldd	r24, Y+3	; 0x03
 1fe:	80 83       	st	Z, r24
	   			  break;
	   	   }
	   	   Local_enuErrorState = ES_OK;
 200:	19 82       	std	Y+1, r1	; 0x01
 202:	02 c0       	rjmp	.+4      	; 0x208 <DIO_enuSet_Port_Val+0x8e>
	      }
	      else
	      {
	   	   Local_enuErrorState=ES_OUT_OF_RANGE;
 204:	82 e0       	ldi	r24, 0x02	; 2
 206:	89 83       	std	Y+1, r24	; 0x01
	      }

	   return Local_enuErrorState;
 208:	89 81       	ldd	r24, Y+1	; 0x01
	}
 20a:	0f 90       	pop	r0
 20c:	0f 90       	pop	r0
 20e:	0f 90       	pop	r0
 210:	0f 90       	pop	r0
 212:	0f 90       	pop	r0
 214:	cf 91       	pop	r28
 216:	df 91       	pop	r29
 218:	08 95       	ret

0000021a <DIO_enuTog_Port_Val>:

ES_t DIO_enuTog_Port_Val(u8 Copy_u8PortID)
{
 21a:	df 93       	push	r29
 21c:	cf 93       	push	r28
 21e:	00 d0       	rcall	.+0      	; 0x220 <DIO_enuTog_Port_Val+0x6>
 220:	00 d0       	rcall	.+0      	; 0x222 <DIO_enuTog_Port_Val+0x8>
 222:	cd b7       	in	r28, 0x3d	; 61
 224:	de b7       	in	r29, 0x3e	; 62
 226:	8a 83       	std	Y+2, r24	; 0x02
   ES_t Local_enuErrorState=ES_NOK;
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	89 83       	std	Y+1, r24	; 0x01

   if (Copy_u8PortID<=DIO_PORTD)
 22c:	8a 81       	ldd	r24, Y+2	; 0x02
 22e:	84 30       	cpi	r24, 0x04	; 4
 230:	08 f0       	brcs	.+2      	; 0x234 <DIO_enuTog_Port_Val+0x1a>
 232:	40 c0       	rjmp	.+128    	; 0x2b4 <DIO_enuTog_Port_Val+0x9a>
   	      {
   	   	   switch(Copy_u8PortID)
 234:	8a 81       	ldd	r24, Y+2	; 0x02
 236:	28 2f       	mov	r18, r24
 238:	30 e0       	ldi	r19, 0x00	; 0
 23a:	3c 83       	std	Y+4, r19	; 0x04
 23c:	2b 83       	std	Y+3, r18	; 0x03
 23e:	8b 81       	ldd	r24, Y+3	; 0x03
 240:	9c 81       	ldd	r25, Y+4	; 0x04
 242:	81 30       	cpi	r24, 0x01	; 1
 244:	91 05       	cpc	r25, r1
 246:	e9 f0       	breq	.+58     	; 0x282 <DIO_enuTog_Port_Val+0x68>
 248:	2b 81       	ldd	r18, Y+3	; 0x03
 24a:	3c 81       	ldd	r19, Y+4	; 0x04
 24c:	22 30       	cpi	r18, 0x02	; 2
 24e:	31 05       	cpc	r19, r1
 250:	2c f4       	brge	.+10     	; 0x25c <DIO_enuTog_Port_Val+0x42>
 252:	8b 81       	ldd	r24, Y+3	; 0x03
 254:	9c 81       	ldd	r25, Y+4	; 0x04
 256:	00 97       	sbiw	r24, 0x00	; 0
 258:	61 f0       	breq	.+24     	; 0x272 <DIO_enuTog_Port_Val+0x58>
 25a:	2a c0       	rjmp	.+84     	; 0x2b0 <DIO_enuTog_Port_Val+0x96>
 25c:	2b 81       	ldd	r18, Y+3	; 0x03
 25e:	3c 81       	ldd	r19, Y+4	; 0x04
 260:	22 30       	cpi	r18, 0x02	; 2
 262:	31 05       	cpc	r19, r1
 264:	b1 f0       	breq	.+44     	; 0x292 <DIO_enuTog_Port_Val+0x78>
 266:	8b 81       	ldd	r24, Y+3	; 0x03
 268:	9c 81       	ldd	r25, Y+4	; 0x04
 26a:	83 30       	cpi	r24, 0x03	; 3
 26c:	91 05       	cpc	r25, r1
 26e:	c9 f0       	breq	.+50     	; 0x2a2 <DIO_enuTog_Port_Val+0x88>
 270:	1f c0       	rjmp	.+62     	; 0x2b0 <DIO_enuTog_Port_Val+0x96>
   	   	   {
   	   	      case DIO_PORTA:
   	   	    	  PORTA=~PORTA;
 272:	ab e3       	ldi	r26, 0x3B	; 59
 274:	b0 e0       	ldi	r27, 0x00	; 0
 276:	eb e3       	ldi	r30, 0x3B	; 59
 278:	f0 e0       	ldi	r31, 0x00	; 0
 27a:	80 81       	ld	r24, Z
 27c:	80 95       	com	r24
 27e:	8c 93       	st	X, r24
 280:	17 c0       	rjmp	.+46     	; 0x2b0 <DIO_enuTog_Port_Val+0x96>
   	   			  break;
   	   	      case DIO_PORTB:
   	   	    	  PORTB=~PORTB;
 282:	a8 e3       	ldi	r26, 0x38	; 56
 284:	b0 e0       	ldi	r27, 0x00	; 0
 286:	e8 e3       	ldi	r30, 0x38	; 56
 288:	f0 e0       	ldi	r31, 0x00	; 0
 28a:	80 81       	ld	r24, Z
 28c:	80 95       	com	r24
 28e:	8c 93       	st	X, r24
 290:	0f c0       	rjmp	.+30     	; 0x2b0 <DIO_enuTog_Port_Val+0x96>
   	   			  break;
   	   	      case DIO_PORTC:
   	   	    	  PORTC=~PORTC;
 292:	a5 e3       	ldi	r26, 0x35	; 53
 294:	b0 e0       	ldi	r27, 0x00	; 0
 296:	e5 e3       	ldi	r30, 0x35	; 53
 298:	f0 e0       	ldi	r31, 0x00	; 0
 29a:	80 81       	ld	r24, Z
 29c:	80 95       	com	r24
 29e:	8c 93       	st	X, r24
 2a0:	07 c0       	rjmp	.+14     	; 0x2b0 <DIO_enuTog_Port_Val+0x96>
   	   			  break;
   	   	      case DIO_PORTD:
   	   	    	  PORTD=~PORTD;
 2a2:	a2 e3       	ldi	r26, 0x32	; 50
 2a4:	b0 e0       	ldi	r27, 0x00	; 0
 2a6:	e2 e3       	ldi	r30, 0x32	; 50
 2a8:	f0 e0       	ldi	r31, 0x00	; 0
 2aa:	80 81       	ld	r24, Z
 2ac:	80 95       	com	r24
 2ae:	8c 93       	st	X, r24
   	   			  break;
   	   	   }
   	   	   Local_enuErrorState = ES_OK;
 2b0:	19 82       	std	Y+1, r1	; 0x01
 2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <DIO_enuTog_Port_Val+0x9e>
   	      }
   	      else
   	      {
   	   	   Local_enuErrorState=ES_OUT_OF_RANGE;
 2b4:	82 e0       	ldi	r24, 0x02	; 2
 2b6:	89 83       	std	Y+1, r24	; 0x01
   	      }


   return Local_enuErrorState;
 2b8:	89 81       	ldd	r24, Y+1	; 0x01
}
 2ba:	0f 90       	pop	r0
 2bc:	0f 90       	pop	r0
 2be:	0f 90       	pop	r0
 2c0:	0f 90       	pop	r0
 2c2:	cf 91       	pop	r28
 2c4:	df 91       	pop	r29
 2c6:	08 95       	ret

000002c8 <DIO_Get_Port_Val>:

ES_t DIO_Get_Port_Val(u8 Copy_u8PortID, u8 *Copy_pu8Value )
{
 2c8:	df 93       	push	r29
 2ca:	cf 93       	push	r28
 2cc:	00 d0       	rcall	.+0      	; 0x2ce <DIO_Get_Port_Val+0x6>
 2ce:	00 d0       	rcall	.+0      	; 0x2d0 <DIO_Get_Port_Val+0x8>
 2d0:	00 d0       	rcall	.+0      	; 0x2d2 <DIO_Get_Port_Val+0xa>
 2d2:	cd b7       	in	r28, 0x3d	; 61
 2d4:	de b7       	in	r29, 0x3e	; 62
 2d6:	8a 83       	std	Y+2, r24	; 0x02
 2d8:	7c 83       	std	Y+4, r23	; 0x04
 2da:	6b 83       	std	Y+3, r22	; 0x03
   ES_t Local_enuErrorState=ES_NOK;
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	89 83       	std	Y+1, r24	; 0x01
   if (Copy_pu8Value != NULL)
 2e0:	8b 81       	ldd	r24, Y+3	; 0x03
 2e2:	9c 81       	ldd	r25, Y+4	; 0x04
 2e4:	00 97       	sbiw	r24, 0x00	; 0
 2e6:	09 f4       	brne	.+2      	; 0x2ea <DIO_Get_Port_Val+0x22>
 2e8:	42 c0       	rjmp	.+132    	; 0x36e <DIO_Get_Port_Val+0xa6>
   {
	   if (Copy_u8PortID<=DIO_PORTD)
 2ea:	8a 81       	ldd	r24, Y+2	; 0x02
 2ec:	84 30       	cpi	r24, 0x04	; 4
 2ee:	e0 f5       	brcc	.+120    	; 0x368 <DIO_Get_Port_Val+0xa0>
		  {
		   switch(Copy_u8PortID)
 2f0:	8a 81       	ldd	r24, Y+2	; 0x02
 2f2:	28 2f       	mov	r18, r24
 2f4:	30 e0       	ldi	r19, 0x00	; 0
 2f6:	3e 83       	std	Y+6, r19	; 0x06
 2f8:	2d 83       	std	Y+5, r18	; 0x05
 2fa:	8d 81       	ldd	r24, Y+5	; 0x05
 2fc:	9e 81       	ldd	r25, Y+6	; 0x06
 2fe:	81 30       	cpi	r24, 0x01	; 1
 300:	91 05       	cpc	r25, r1
 302:	e1 f0       	breq	.+56     	; 0x33c <DIO_Get_Port_Val+0x74>
 304:	2d 81       	ldd	r18, Y+5	; 0x05
 306:	3e 81       	ldd	r19, Y+6	; 0x06
 308:	22 30       	cpi	r18, 0x02	; 2
 30a:	31 05       	cpc	r19, r1
 30c:	2c f4       	brge	.+10     	; 0x318 <DIO_Get_Port_Val+0x50>
 30e:	8d 81       	ldd	r24, Y+5	; 0x05
 310:	9e 81       	ldd	r25, Y+6	; 0x06
 312:	00 97       	sbiw	r24, 0x00	; 0
 314:	61 f0       	breq	.+24     	; 0x32e <DIO_Get_Port_Val+0x66>
 316:	26 c0       	rjmp	.+76     	; 0x364 <DIO_Get_Port_Val+0x9c>
 318:	2d 81       	ldd	r18, Y+5	; 0x05
 31a:	3e 81       	ldd	r19, Y+6	; 0x06
 31c:	22 30       	cpi	r18, 0x02	; 2
 31e:	31 05       	cpc	r19, r1
 320:	a1 f0       	breq	.+40     	; 0x34a <DIO_Get_Port_Val+0x82>
 322:	8d 81       	ldd	r24, Y+5	; 0x05
 324:	9e 81       	ldd	r25, Y+6	; 0x06
 326:	83 30       	cpi	r24, 0x03	; 3
 328:	91 05       	cpc	r25, r1
 32a:	b1 f0       	breq	.+44     	; 0x358 <DIO_Get_Port_Val+0x90>
 32c:	1b c0       	rjmp	.+54     	; 0x364 <DIO_Get_Port_Val+0x9c>
		   {
			  case DIO_PORTA:
				*Copy_pu8Value=PINA;
 32e:	e9 e3       	ldi	r30, 0x39	; 57
 330:	f0 e0       	ldi	r31, 0x00	; 0
 332:	80 81       	ld	r24, Z
 334:	eb 81       	ldd	r30, Y+3	; 0x03
 336:	fc 81       	ldd	r31, Y+4	; 0x04
 338:	80 83       	st	Z, r24
 33a:	14 c0       	rjmp	.+40     	; 0x364 <DIO_Get_Port_Val+0x9c>
				  break;
			  case DIO_PORTB:
				*Copy_pu8Value=PINB;
 33c:	e6 e3       	ldi	r30, 0x36	; 54
 33e:	f0 e0       	ldi	r31, 0x00	; 0
 340:	80 81       	ld	r24, Z
 342:	eb 81       	ldd	r30, Y+3	; 0x03
 344:	fc 81       	ldd	r31, Y+4	; 0x04
 346:	80 83       	st	Z, r24
 348:	0d c0       	rjmp	.+26     	; 0x364 <DIO_Get_Port_Val+0x9c>
				  break;
			  case DIO_PORTC:
				*Copy_pu8Value=PINC;
 34a:	e3 e3       	ldi	r30, 0x33	; 51
 34c:	f0 e0       	ldi	r31, 0x00	; 0
 34e:	80 81       	ld	r24, Z
 350:	eb 81       	ldd	r30, Y+3	; 0x03
 352:	fc 81       	ldd	r31, Y+4	; 0x04
 354:	80 83       	st	Z, r24
 356:	06 c0       	rjmp	.+12     	; 0x364 <DIO_Get_Port_Val+0x9c>
				  break;
			  case DIO_PORTD:
				*Copy_pu8Value=PIND;
 358:	e0 e3       	ldi	r30, 0x30	; 48
 35a:	f0 e0       	ldi	r31, 0x00	; 0
 35c:	80 81       	ld	r24, Z
 35e:	eb 81       	ldd	r30, Y+3	; 0x03
 360:	fc 81       	ldd	r31, Y+4	; 0x04
 362:	80 83       	st	Z, r24
				  break;
		   }
		   Local_enuErrorState = ES_OK;
 364:	19 82       	std	Y+1, r1	; 0x01
 366:	05 c0       	rjmp	.+10     	; 0x372 <DIO_Get_Port_Val+0xaa>
		  }
		  else
		  {
		   Local_enuErrorState=ES_OUT_OF_RANGE;
 368:	82 e0       	ldi	r24, 0x02	; 2
 36a:	89 83       	std	Y+1, r24	; 0x01
 36c:	02 c0       	rjmp	.+4      	; 0x372 <DIO_Get_Port_Val+0xaa>
		  }
   }
   else
   {
	   Local_enuErrorState=ES_NULL_POINTER;
 36e:	83 e0       	ldi	r24, 0x03	; 3
 370:	89 83       	std	Y+1, r24	; 0x01
   }



   return Local_enuErrorState;
 372:	89 81       	ldd	r24, Y+1	; 0x01
}
 374:	26 96       	adiw	r28, 0x06	; 6
 376:	0f b6       	in	r0, 0x3f	; 63
 378:	f8 94       	cli
 37a:	de bf       	out	0x3e, r29	; 62
 37c:	0f be       	out	0x3f, r0	; 63
 37e:	cd bf       	out	0x3d, r28	; 61
 380:	cf 91       	pop	r28
 382:	df 91       	pop	r29
 384:	08 95       	ret

00000386 <DIO_enuSet_Pin_Dir>:

ES_t DIO_enuSet_Pin_Dir(u8 Copy_u8PortID , u8 Copy_u8PinID , u8 Copy_u8Value)
{
 386:	df 93       	push	r29
 388:	cf 93       	push	r28
 38a:	00 d0       	rcall	.+0      	; 0x38c <DIO_enuSet_Pin_Dir+0x6>
 38c:	00 d0       	rcall	.+0      	; 0x38e <DIO_enuSet_Pin_Dir+0x8>
 38e:	00 d0       	rcall	.+0      	; 0x390 <DIO_enuSet_Pin_Dir+0xa>
 390:	cd b7       	in	r28, 0x3d	; 61
 392:	de b7       	in	r29, 0x3e	; 62
 394:	8a 83       	std	Y+2, r24	; 0x02
 396:	6b 83       	std	Y+3, r22	; 0x03
 398:	4c 83       	std	Y+4, r20	; 0x04
   ES_t Local_enuErrorState=ES_NOK;
 39a:	81 e0       	ldi	r24, 0x01	; 1
 39c:	89 83       	std	Y+1, r24	; 0x01
   if (Copy_u8PortID<=DIO_PORTD && Copy_u8PinID<=DIO_Pin7&& Copy_u8Value<=OUTPUT)
 39e:	8a 81       	ldd	r24, Y+2	; 0x02
 3a0:	84 30       	cpi	r24, 0x04	; 4
 3a2:	08 f0       	brcs	.+2      	; 0x3a6 <DIO_enuSet_Pin_Dir+0x20>
 3a4:	d0 c0       	rjmp	.+416    	; 0x546 <DIO_enuSet_Pin_Dir+0x1c0>
 3a6:	8b 81       	ldd	r24, Y+3	; 0x03
 3a8:	88 30       	cpi	r24, 0x08	; 8
 3aa:	08 f0       	brcs	.+2      	; 0x3ae <DIO_enuSet_Pin_Dir+0x28>
 3ac:	cc c0       	rjmp	.+408    	; 0x546 <DIO_enuSet_Pin_Dir+0x1c0>
 3ae:	8c 81       	ldd	r24, Y+4	; 0x04
 3b0:	82 30       	cpi	r24, 0x02	; 2
 3b2:	08 f0       	brcs	.+2      	; 0x3b6 <DIO_enuSet_Pin_Dir+0x30>
 3b4:	c8 c0       	rjmp	.+400    	; 0x546 <DIO_enuSet_Pin_Dir+0x1c0>
   {
	   switch (Copy_u8PortID)
 3b6:	8a 81       	ldd	r24, Y+2	; 0x02
 3b8:	28 2f       	mov	r18, r24
 3ba:	30 e0       	ldi	r19, 0x00	; 0
 3bc:	3e 83       	std	Y+6, r19	; 0x06
 3be:	2d 83       	std	Y+5, r18	; 0x05
 3c0:	6d 81       	ldd	r22, Y+5	; 0x05
 3c2:	7e 81       	ldd	r23, Y+6	; 0x06
 3c4:	61 30       	cpi	r22, 0x01	; 1
 3c6:	71 05       	cpc	r23, r1
 3c8:	09 f4       	brne	.+2      	; 0x3cc <DIO_enuSet_Pin_Dir+0x46>
 3ca:	41 c0       	rjmp	.+130    	; 0x44e <DIO_enuSet_Pin_Dir+0xc8>
 3cc:	8d 81       	ldd	r24, Y+5	; 0x05
 3ce:	9e 81       	ldd	r25, Y+6	; 0x06
 3d0:	82 30       	cpi	r24, 0x02	; 2
 3d2:	91 05       	cpc	r25, r1
 3d4:	34 f4       	brge	.+12     	; 0x3e2 <DIO_enuSet_Pin_Dir+0x5c>
 3d6:	2d 81       	ldd	r18, Y+5	; 0x05
 3d8:	3e 81       	ldd	r19, Y+6	; 0x06
 3da:	21 15       	cp	r18, r1
 3dc:	31 05       	cpc	r19, r1
 3de:	71 f0       	breq	.+28     	; 0x3fc <DIO_enuSet_Pin_Dir+0x76>
 3e0:	b0 c0       	rjmp	.+352    	; 0x542 <DIO_enuSet_Pin_Dir+0x1bc>
 3e2:	6d 81       	ldd	r22, Y+5	; 0x05
 3e4:	7e 81       	ldd	r23, Y+6	; 0x06
 3e6:	62 30       	cpi	r22, 0x02	; 2
 3e8:	71 05       	cpc	r23, r1
 3ea:	09 f4       	brne	.+2      	; 0x3ee <DIO_enuSet_Pin_Dir+0x68>
 3ec:	59 c0       	rjmp	.+178    	; 0x4a0 <DIO_enuSet_Pin_Dir+0x11a>
 3ee:	8d 81       	ldd	r24, Y+5	; 0x05
 3f0:	9e 81       	ldd	r25, Y+6	; 0x06
 3f2:	83 30       	cpi	r24, 0x03	; 3
 3f4:	91 05       	cpc	r25, r1
 3f6:	09 f4       	brne	.+2      	; 0x3fa <DIO_enuSet_Pin_Dir+0x74>
 3f8:	7c c0       	rjmp	.+248    	; 0x4f2 <DIO_enuSet_Pin_Dir+0x16c>
 3fa:	a3 c0       	rjmp	.+326    	; 0x542 <DIO_enuSet_Pin_Dir+0x1bc>
	   {
	      case DIO_PORTA:
		    DDRA&=~(1<<Copy_u8PinID);
 3fc:	aa e3       	ldi	r26, 0x3A	; 58
 3fe:	b0 e0       	ldi	r27, 0x00	; 0
 400:	ea e3       	ldi	r30, 0x3A	; 58
 402:	f0 e0       	ldi	r31, 0x00	; 0
 404:	80 81       	ld	r24, Z
 406:	48 2f       	mov	r20, r24
 408:	8b 81       	ldd	r24, Y+3	; 0x03
 40a:	28 2f       	mov	r18, r24
 40c:	30 e0       	ldi	r19, 0x00	; 0
 40e:	81 e0       	ldi	r24, 0x01	; 1
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	02 c0       	rjmp	.+4      	; 0x418 <DIO_enuSet_Pin_Dir+0x92>
 414:	88 0f       	add	r24, r24
 416:	99 1f       	adc	r25, r25
 418:	2a 95       	dec	r18
 41a:	e2 f7       	brpl	.-8      	; 0x414 <DIO_enuSet_Pin_Dir+0x8e>
 41c:	80 95       	com	r24
 41e:	84 23       	and	r24, r20
 420:	8c 93       	st	X, r24
		    DDRA|=(Copy_u8Value<<Copy_u8PinID);
 422:	aa e3       	ldi	r26, 0x3A	; 58
 424:	b0 e0       	ldi	r27, 0x00	; 0
 426:	ea e3       	ldi	r30, 0x3A	; 58
 428:	f0 e0       	ldi	r31, 0x00	; 0
 42a:	80 81       	ld	r24, Z
 42c:	48 2f       	mov	r20, r24
 42e:	8c 81       	ldd	r24, Y+4	; 0x04
 430:	28 2f       	mov	r18, r24
 432:	30 e0       	ldi	r19, 0x00	; 0
 434:	8b 81       	ldd	r24, Y+3	; 0x03
 436:	88 2f       	mov	r24, r24
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	b9 01       	movw	r22, r18
 43c:	02 c0       	rjmp	.+4      	; 0x442 <DIO_enuSet_Pin_Dir+0xbc>
 43e:	66 0f       	add	r22, r22
 440:	77 1f       	adc	r23, r23
 442:	8a 95       	dec	r24
 444:	e2 f7       	brpl	.-8      	; 0x43e <DIO_enuSet_Pin_Dir+0xb8>
 446:	cb 01       	movw	r24, r22
 448:	84 2b       	or	r24, r20
 44a:	8c 93       	st	X, r24
 44c:	7a c0       	rjmp	.+244    	; 0x542 <DIO_enuSet_Pin_Dir+0x1bc>
		    break;
	      case DIO_PORTB:
			DDRB&=~(1<<Copy_u8PinID);
 44e:	a7 e3       	ldi	r26, 0x37	; 55
 450:	b0 e0       	ldi	r27, 0x00	; 0
 452:	e7 e3       	ldi	r30, 0x37	; 55
 454:	f0 e0       	ldi	r31, 0x00	; 0
 456:	80 81       	ld	r24, Z
 458:	48 2f       	mov	r20, r24
 45a:	8b 81       	ldd	r24, Y+3	; 0x03
 45c:	28 2f       	mov	r18, r24
 45e:	30 e0       	ldi	r19, 0x00	; 0
 460:	81 e0       	ldi	r24, 0x01	; 1
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	02 c0       	rjmp	.+4      	; 0x46a <DIO_enuSet_Pin_Dir+0xe4>
 466:	88 0f       	add	r24, r24
 468:	99 1f       	adc	r25, r25
 46a:	2a 95       	dec	r18
 46c:	e2 f7       	brpl	.-8      	; 0x466 <DIO_enuSet_Pin_Dir+0xe0>
 46e:	80 95       	com	r24
 470:	84 23       	and	r24, r20
 472:	8c 93       	st	X, r24
			DDRB|=(Copy_u8Value<<Copy_u8PinID);
 474:	a7 e3       	ldi	r26, 0x37	; 55
 476:	b0 e0       	ldi	r27, 0x00	; 0
 478:	e7 e3       	ldi	r30, 0x37	; 55
 47a:	f0 e0       	ldi	r31, 0x00	; 0
 47c:	80 81       	ld	r24, Z
 47e:	48 2f       	mov	r20, r24
 480:	8c 81       	ldd	r24, Y+4	; 0x04
 482:	28 2f       	mov	r18, r24
 484:	30 e0       	ldi	r19, 0x00	; 0
 486:	8b 81       	ldd	r24, Y+3	; 0x03
 488:	88 2f       	mov	r24, r24
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	b9 01       	movw	r22, r18
 48e:	02 c0       	rjmp	.+4      	; 0x494 <DIO_enuSet_Pin_Dir+0x10e>
 490:	66 0f       	add	r22, r22
 492:	77 1f       	adc	r23, r23
 494:	8a 95       	dec	r24
 496:	e2 f7       	brpl	.-8      	; 0x490 <DIO_enuSet_Pin_Dir+0x10a>
 498:	cb 01       	movw	r24, r22
 49a:	84 2b       	or	r24, r20
 49c:	8c 93       	st	X, r24
 49e:	51 c0       	rjmp	.+162    	; 0x542 <DIO_enuSet_Pin_Dir+0x1bc>
			break;
	      case DIO_PORTC:
			DDRC&=~(1<<Copy_u8PinID);
 4a0:	a4 e3       	ldi	r26, 0x34	; 52
 4a2:	b0 e0       	ldi	r27, 0x00	; 0
 4a4:	e4 e3       	ldi	r30, 0x34	; 52
 4a6:	f0 e0       	ldi	r31, 0x00	; 0
 4a8:	80 81       	ld	r24, Z
 4aa:	48 2f       	mov	r20, r24
 4ac:	8b 81       	ldd	r24, Y+3	; 0x03
 4ae:	28 2f       	mov	r18, r24
 4b0:	30 e0       	ldi	r19, 0x00	; 0
 4b2:	81 e0       	ldi	r24, 0x01	; 1
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	02 c0       	rjmp	.+4      	; 0x4bc <DIO_enuSet_Pin_Dir+0x136>
 4b8:	88 0f       	add	r24, r24
 4ba:	99 1f       	adc	r25, r25
 4bc:	2a 95       	dec	r18
 4be:	e2 f7       	brpl	.-8      	; 0x4b8 <DIO_enuSet_Pin_Dir+0x132>
 4c0:	80 95       	com	r24
 4c2:	84 23       	and	r24, r20
 4c4:	8c 93       	st	X, r24
			DDRC|=(Copy_u8Value<<Copy_u8PinID);
 4c6:	a4 e3       	ldi	r26, 0x34	; 52
 4c8:	b0 e0       	ldi	r27, 0x00	; 0
 4ca:	e4 e3       	ldi	r30, 0x34	; 52
 4cc:	f0 e0       	ldi	r31, 0x00	; 0
 4ce:	80 81       	ld	r24, Z
 4d0:	48 2f       	mov	r20, r24
 4d2:	8c 81       	ldd	r24, Y+4	; 0x04
 4d4:	28 2f       	mov	r18, r24
 4d6:	30 e0       	ldi	r19, 0x00	; 0
 4d8:	8b 81       	ldd	r24, Y+3	; 0x03
 4da:	88 2f       	mov	r24, r24
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	b9 01       	movw	r22, r18
 4e0:	02 c0       	rjmp	.+4      	; 0x4e6 <DIO_enuSet_Pin_Dir+0x160>
 4e2:	66 0f       	add	r22, r22
 4e4:	77 1f       	adc	r23, r23
 4e6:	8a 95       	dec	r24
 4e8:	e2 f7       	brpl	.-8      	; 0x4e2 <DIO_enuSet_Pin_Dir+0x15c>
 4ea:	cb 01       	movw	r24, r22
 4ec:	84 2b       	or	r24, r20
 4ee:	8c 93       	st	X, r24
 4f0:	28 c0       	rjmp	.+80     	; 0x542 <DIO_enuSet_Pin_Dir+0x1bc>
			break;
	      case DIO_PORTD:
			DDRD&=~(1<<Copy_u8PinID);
 4f2:	a1 e3       	ldi	r26, 0x31	; 49
 4f4:	b0 e0       	ldi	r27, 0x00	; 0
 4f6:	e1 e3       	ldi	r30, 0x31	; 49
 4f8:	f0 e0       	ldi	r31, 0x00	; 0
 4fa:	80 81       	ld	r24, Z
 4fc:	48 2f       	mov	r20, r24
 4fe:	8b 81       	ldd	r24, Y+3	; 0x03
 500:	28 2f       	mov	r18, r24
 502:	30 e0       	ldi	r19, 0x00	; 0
 504:	81 e0       	ldi	r24, 0x01	; 1
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	02 c0       	rjmp	.+4      	; 0x50e <DIO_enuSet_Pin_Dir+0x188>
 50a:	88 0f       	add	r24, r24
 50c:	99 1f       	adc	r25, r25
 50e:	2a 95       	dec	r18
 510:	e2 f7       	brpl	.-8      	; 0x50a <DIO_enuSet_Pin_Dir+0x184>
 512:	80 95       	com	r24
 514:	84 23       	and	r24, r20
 516:	8c 93       	st	X, r24
			DDRD|=(Copy_u8Value<<Copy_u8PinID);
 518:	a1 e3       	ldi	r26, 0x31	; 49
 51a:	b0 e0       	ldi	r27, 0x00	; 0
 51c:	e1 e3       	ldi	r30, 0x31	; 49
 51e:	f0 e0       	ldi	r31, 0x00	; 0
 520:	80 81       	ld	r24, Z
 522:	48 2f       	mov	r20, r24
 524:	8c 81       	ldd	r24, Y+4	; 0x04
 526:	28 2f       	mov	r18, r24
 528:	30 e0       	ldi	r19, 0x00	; 0
 52a:	8b 81       	ldd	r24, Y+3	; 0x03
 52c:	88 2f       	mov	r24, r24
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	b9 01       	movw	r22, r18
 532:	02 c0       	rjmp	.+4      	; 0x538 <DIO_enuSet_Pin_Dir+0x1b2>
 534:	66 0f       	add	r22, r22
 536:	77 1f       	adc	r23, r23
 538:	8a 95       	dec	r24
 53a:	e2 f7       	brpl	.-8      	; 0x534 <DIO_enuSet_Pin_Dir+0x1ae>
 53c:	cb 01       	movw	r24, r22
 53e:	84 2b       	or	r24, r20
 540:	8c 93       	st	X, r24
			break;
	   }
	   Local_enuErrorState=ES_OK;
 542:	19 82       	std	Y+1, r1	; 0x01
 544:	02 c0       	rjmp	.+4      	; 0x54a <DIO_enuSet_Pin_Dir+0x1c4>
   }
   else
   {
	   Local_enuErrorState=ES_OUT_OF_RANGE;
 546:	82 e0       	ldi	r24, 0x02	; 2
 548:	89 83       	std	Y+1, r24	; 0x01
   }


   return Local_enuErrorState;
 54a:	89 81       	ldd	r24, Y+1	; 0x01
}
 54c:	26 96       	adiw	r28, 0x06	; 6
 54e:	0f b6       	in	r0, 0x3f	; 63
 550:	f8 94       	cli
 552:	de bf       	out	0x3e, r29	; 62
 554:	0f be       	out	0x3f, r0	; 63
 556:	cd bf       	out	0x3d, r28	; 61
 558:	cf 91       	pop	r28
 55a:	df 91       	pop	r29
 55c:	08 95       	ret

0000055e <DIO_enuSet_Pin_Val>:

ES_t DIO_enuSet_Pin_Val(u8 Copy_u8PortID , u8 Copy_u8PinID , u8 Copy_u8Value)
{
 55e:	df 93       	push	r29
 560:	cf 93       	push	r28
 562:	00 d0       	rcall	.+0      	; 0x564 <DIO_enuSet_Pin_Val+0x6>
 564:	00 d0       	rcall	.+0      	; 0x566 <DIO_enuSet_Pin_Val+0x8>
 566:	00 d0       	rcall	.+0      	; 0x568 <DIO_enuSet_Pin_Val+0xa>
 568:	cd b7       	in	r28, 0x3d	; 61
 56a:	de b7       	in	r29, 0x3e	; 62
 56c:	8a 83       	std	Y+2, r24	; 0x02
 56e:	6b 83       	std	Y+3, r22	; 0x03
 570:	4c 83       	std	Y+4, r20	; 0x04

   ES_t Local_enuErrorState=ES_NOK;
 572:	81 e0       	ldi	r24, 0x01	; 1
 574:	89 83       	std	Y+1, r24	; 0x01
      if (Copy_u8PortID<=DIO_PORTD && Copy_u8PinID<=DIO_Pin7&& Copy_u8Value<=OUTPUT)
 576:	8a 81       	ldd	r24, Y+2	; 0x02
 578:	84 30       	cpi	r24, 0x04	; 4
 57a:	08 f0       	brcs	.+2      	; 0x57e <DIO_enuSet_Pin_Val+0x20>
 57c:	d0 c0       	rjmp	.+416    	; 0x71e <DIO_enuSet_Pin_Val+0x1c0>
 57e:	8b 81       	ldd	r24, Y+3	; 0x03
 580:	88 30       	cpi	r24, 0x08	; 8
 582:	08 f0       	brcs	.+2      	; 0x586 <DIO_enuSet_Pin_Val+0x28>
 584:	cc c0       	rjmp	.+408    	; 0x71e <DIO_enuSet_Pin_Val+0x1c0>
 586:	8c 81       	ldd	r24, Y+4	; 0x04
 588:	82 30       	cpi	r24, 0x02	; 2
 58a:	08 f0       	brcs	.+2      	; 0x58e <DIO_enuSet_Pin_Val+0x30>
 58c:	c8 c0       	rjmp	.+400    	; 0x71e <DIO_enuSet_Pin_Val+0x1c0>
      {
   	   switch (Copy_u8PortID)
 58e:	8a 81       	ldd	r24, Y+2	; 0x02
 590:	28 2f       	mov	r18, r24
 592:	30 e0       	ldi	r19, 0x00	; 0
 594:	3e 83       	std	Y+6, r19	; 0x06
 596:	2d 83       	std	Y+5, r18	; 0x05
 598:	6d 81       	ldd	r22, Y+5	; 0x05
 59a:	7e 81       	ldd	r23, Y+6	; 0x06
 59c:	61 30       	cpi	r22, 0x01	; 1
 59e:	71 05       	cpc	r23, r1
 5a0:	09 f4       	brne	.+2      	; 0x5a4 <DIO_enuSet_Pin_Val+0x46>
 5a2:	41 c0       	rjmp	.+130    	; 0x626 <DIO_enuSet_Pin_Val+0xc8>
 5a4:	8d 81       	ldd	r24, Y+5	; 0x05
 5a6:	9e 81       	ldd	r25, Y+6	; 0x06
 5a8:	82 30       	cpi	r24, 0x02	; 2
 5aa:	91 05       	cpc	r25, r1
 5ac:	34 f4       	brge	.+12     	; 0x5ba <DIO_enuSet_Pin_Val+0x5c>
 5ae:	2d 81       	ldd	r18, Y+5	; 0x05
 5b0:	3e 81       	ldd	r19, Y+6	; 0x06
 5b2:	21 15       	cp	r18, r1
 5b4:	31 05       	cpc	r19, r1
 5b6:	71 f0       	breq	.+28     	; 0x5d4 <DIO_enuSet_Pin_Val+0x76>
 5b8:	b0 c0       	rjmp	.+352    	; 0x71a <DIO_enuSet_Pin_Val+0x1bc>
 5ba:	6d 81       	ldd	r22, Y+5	; 0x05
 5bc:	7e 81       	ldd	r23, Y+6	; 0x06
 5be:	62 30       	cpi	r22, 0x02	; 2
 5c0:	71 05       	cpc	r23, r1
 5c2:	09 f4       	brne	.+2      	; 0x5c6 <DIO_enuSet_Pin_Val+0x68>
 5c4:	59 c0       	rjmp	.+178    	; 0x678 <DIO_enuSet_Pin_Val+0x11a>
 5c6:	8d 81       	ldd	r24, Y+5	; 0x05
 5c8:	9e 81       	ldd	r25, Y+6	; 0x06
 5ca:	83 30       	cpi	r24, 0x03	; 3
 5cc:	91 05       	cpc	r25, r1
 5ce:	09 f4       	brne	.+2      	; 0x5d2 <DIO_enuSet_Pin_Val+0x74>
 5d0:	7c c0       	rjmp	.+248    	; 0x6ca <DIO_enuSet_Pin_Val+0x16c>
 5d2:	a3 c0       	rjmp	.+326    	; 0x71a <DIO_enuSet_Pin_Val+0x1bc>
   	   {
   	      case DIO_PORTA:
   		    PORTA&=~(1<<Copy_u8PinID);
 5d4:	ab e3       	ldi	r26, 0x3B	; 59
 5d6:	b0 e0       	ldi	r27, 0x00	; 0
 5d8:	eb e3       	ldi	r30, 0x3B	; 59
 5da:	f0 e0       	ldi	r31, 0x00	; 0
 5dc:	80 81       	ld	r24, Z
 5de:	48 2f       	mov	r20, r24
 5e0:	8b 81       	ldd	r24, Y+3	; 0x03
 5e2:	28 2f       	mov	r18, r24
 5e4:	30 e0       	ldi	r19, 0x00	; 0
 5e6:	81 e0       	ldi	r24, 0x01	; 1
 5e8:	90 e0       	ldi	r25, 0x00	; 0
 5ea:	02 c0       	rjmp	.+4      	; 0x5f0 <DIO_enuSet_Pin_Val+0x92>
 5ec:	88 0f       	add	r24, r24
 5ee:	99 1f       	adc	r25, r25
 5f0:	2a 95       	dec	r18
 5f2:	e2 f7       	brpl	.-8      	; 0x5ec <DIO_enuSet_Pin_Val+0x8e>
 5f4:	80 95       	com	r24
 5f6:	84 23       	and	r24, r20
 5f8:	8c 93       	st	X, r24
   		    PORTA|=(Copy_u8Value<<Copy_u8PinID);
 5fa:	ab e3       	ldi	r26, 0x3B	; 59
 5fc:	b0 e0       	ldi	r27, 0x00	; 0
 5fe:	eb e3       	ldi	r30, 0x3B	; 59
 600:	f0 e0       	ldi	r31, 0x00	; 0
 602:	80 81       	ld	r24, Z
 604:	48 2f       	mov	r20, r24
 606:	8c 81       	ldd	r24, Y+4	; 0x04
 608:	28 2f       	mov	r18, r24
 60a:	30 e0       	ldi	r19, 0x00	; 0
 60c:	8b 81       	ldd	r24, Y+3	; 0x03
 60e:	88 2f       	mov	r24, r24
 610:	90 e0       	ldi	r25, 0x00	; 0
 612:	b9 01       	movw	r22, r18
 614:	02 c0       	rjmp	.+4      	; 0x61a <DIO_enuSet_Pin_Val+0xbc>
 616:	66 0f       	add	r22, r22
 618:	77 1f       	adc	r23, r23
 61a:	8a 95       	dec	r24
 61c:	e2 f7       	brpl	.-8      	; 0x616 <DIO_enuSet_Pin_Val+0xb8>
 61e:	cb 01       	movw	r24, r22
 620:	84 2b       	or	r24, r20
 622:	8c 93       	st	X, r24
 624:	7a c0       	rjmp	.+244    	; 0x71a <DIO_enuSet_Pin_Val+0x1bc>
   		    break;
   	      case DIO_PORTB:
   			PORTB&=~(1<<Copy_u8PinID);
 626:	a8 e3       	ldi	r26, 0x38	; 56
 628:	b0 e0       	ldi	r27, 0x00	; 0
 62a:	e8 e3       	ldi	r30, 0x38	; 56
 62c:	f0 e0       	ldi	r31, 0x00	; 0
 62e:	80 81       	ld	r24, Z
 630:	48 2f       	mov	r20, r24
 632:	8b 81       	ldd	r24, Y+3	; 0x03
 634:	28 2f       	mov	r18, r24
 636:	30 e0       	ldi	r19, 0x00	; 0
 638:	81 e0       	ldi	r24, 0x01	; 1
 63a:	90 e0       	ldi	r25, 0x00	; 0
 63c:	02 c0       	rjmp	.+4      	; 0x642 <DIO_enuSet_Pin_Val+0xe4>
 63e:	88 0f       	add	r24, r24
 640:	99 1f       	adc	r25, r25
 642:	2a 95       	dec	r18
 644:	e2 f7       	brpl	.-8      	; 0x63e <DIO_enuSet_Pin_Val+0xe0>
 646:	80 95       	com	r24
 648:	84 23       	and	r24, r20
 64a:	8c 93       	st	X, r24
   			PORTB|=(Copy_u8Value<<Copy_u8PinID);
 64c:	a8 e3       	ldi	r26, 0x38	; 56
 64e:	b0 e0       	ldi	r27, 0x00	; 0
 650:	e8 e3       	ldi	r30, 0x38	; 56
 652:	f0 e0       	ldi	r31, 0x00	; 0
 654:	80 81       	ld	r24, Z
 656:	48 2f       	mov	r20, r24
 658:	8c 81       	ldd	r24, Y+4	; 0x04
 65a:	28 2f       	mov	r18, r24
 65c:	30 e0       	ldi	r19, 0x00	; 0
 65e:	8b 81       	ldd	r24, Y+3	; 0x03
 660:	88 2f       	mov	r24, r24
 662:	90 e0       	ldi	r25, 0x00	; 0
 664:	b9 01       	movw	r22, r18
 666:	02 c0       	rjmp	.+4      	; 0x66c <DIO_enuSet_Pin_Val+0x10e>
 668:	66 0f       	add	r22, r22
 66a:	77 1f       	adc	r23, r23
 66c:	8a 95       	dec	r24
 66e:	e2 f7       	brpl	.-8      	; 0x668 <DIO_enuSet_Pin_Val+0x10a>
 670:	cb 01       	movw	r24, r22
 672:	84 2b       	or	r24, r20
 674:	8c 93       	st	X, r24
 676:	51 c0       	rjmp	.+162    	; 0x71a <DIO_enuSet_Pin_Val+0x1bc>
   			break;
   	      case DIO_PORTC:
   			PORTC&=~(1<<Copy_u8PinID);
 678:	a5 e3       	ldi	r26, 0x35	; 53
 67a:	b0 e0       	ldi	r27, 0x00	; 0
 67c:	e5 e3       	ldi	r30, 0x35	; 53
 67e:	f0 e0       	ldi	r31, 0x00	; 0
 680:	80 81       	ld	r24, Z
 682:	48 2f       	mov	r20, r24
 684:	8b 81       	ldd	r24, Y+3	; 0x03
 686:	28 2f       	mov	r18, r24
 688:	30 e0       	ldi	r19, 0x00	; 0
 68a:	81 e0       	ldi	r24, 0x01	; 1
 68c:	90 e0       	ldi	r25, 0x00	; 0
 68e:	02 c0       	rjmp	.+4      	; 0x694 <DIO_enuSet_Pin_Val+0x136>
 690:	88 0f       	add	r24, r24
 692:	99 1f       	adc	r25, r25
 694:	2a 95       	dec	r18
 696:	e2 f7       	brpl	.-8      	; 0x690 <DIO_enuSet_Pin_Val+0x132>
 698:	80 95       	com	r24
 69a:	84 23       	and	r24, r20
 69c:	8c 93       	st	X, r24
   			PORTC|=(Copy_u8Value<<Copy_u8PinID);
 69e:	a5 e3       	ldi	r26, 0x35	; 53
 6a0:	b0 e0       	ldi	r27, 0x00	; 0
 6a2:	e5 e3       	ldi	r30, 0x35	; 53
 6a4:	f0 e0       	ldi	r31, 0x00	; 0
 6a6:	80 81       	ld	r24, Z
 6a8:	48 2f       	mov	r20, r24
 6aa:	8c 81       	ldd	r24, Y+4	; 0x04
 6ac:	28 2f       	mov	r18, r24
 6ae:	30 e0       	ldi	r19, 0x00	; 0
 6b0:	8b 81       	ldd	r24, Y+3	; 0x03
 6b2:	88 2f       	mov	r24, r24
 6b4:	90 e0       	ldi	r25, 0x00	; 0
 6b6:	b9 01       	movw	r22, r18
 6b8:	02 c0       	rjmp	.+4      	; 0x6be <DIO_enuSet_Pin_Val+0x160>
 6ba:	66 0f       	add	r22, r22
 6bc:	77 1f       	adc	r23, r23
 6be:	8a 95       	dec	r24
 6c0:	e2 f7       	brpl	.-8      	; 0x6ba <DIO_enuSet_Pin_Val+0x15c>
 6c2:	cb 01       	movw	r24, r22
 6c4:	84 2b       	or	r24, r20
 6c6:	8c 93       	st	X, r24
 6c8:	28 c0       	rjmp	.+80     	; 0x71a <DIO_enuSet_Pin_Val+0x1bc>
   			break;
   	      case DIO_PORTD:
   			PORTD&=~(1<<Copy_u8PinID);
 6ca:	a2 e3       	ldi	r26, 0x32	; 50
 6cc:	b0 e0       	ldi	r27, 0x00	; 0
 6ce:	e2 e3       	ldi	r30, 0x32	; 50
 6d0:	f0 e0       	ldi	r31, 0x00	; 0
 6d2:	80 81       	ld	r24, Z
 6d4:	48 2f       	mov	r20, r24
 6d6:	8b 81       	ldd	r24, Y+3	; 0x03
 6d8:	28 2f       	mov	r18, r24
 6da:	30 e0       	ldi	r19, 0x00	; 0
 6dc:	81 e0       	ldi	r24, 0x01	; 1
 6de:	90 e0       	ldi	r25, 0x00	; 0
 6e0:	02 c0       	rjmp	.+4      	; 0x6e6 <DIO_enuSet_Pin_Val+0x188>
 6e2:	88 0f       	add	r24, r24
 6e4:	99 1f       	adc	r25, r25
 6e6:	2a 95       	dec	r18
 6e8:	e2 f7       	brpl	.-8      	; 0x6e2 <DIO_enuSet_Pin_Val+0x184>
 6ea:	80 95       	com	r24
 6ec:	84 23       	and	r24, r20
 6ee:	8c 93       	st	X, r24
   			PORTD|=(Copy_u8Value<<Copy_u8PinID);
 6f0:	a2 e3       	ldi	r26, 0x32	; 50
 6f2:	b0 e0       	ldi	r27, 0x00	; 0
 6f4:	e2 e3       	ldi	r30, 0x32	; 50
 6f6:	f0 e0       	ldi	r31, 0x00	; 0
 6f8:	80 81       	ld	r24, Z
 6fa:	48 2f       	mov	r20, r24
 6fc:	8c 81       	ldd	r24, Y+4	; 0x04
 6fe:	28 2f       	mov	r18, r24
 700:	30 e0       	ldi	r19, 0x00	; 0
 702:	8b 81       	ldd	r24, Y+3	; 0x03
 704:	88 2f       	mov	r24, r24
 706:	90 e0       	ldi	r25, 0x00	; 0
 708:	b9 01       	movw	r22, r18
 70a:	02 c0       	rjmp	.+4      	; 0x710 <DIO_enuSet_Pin_Val+0x1b2>
 70c:	66 0f       	add	r22, r22
 70e:	77 1f       	adc	r23, r23
 710:	8a 95       	dec	r24
 712:	e2 f7       	brpl	.-8      	; 0x70c <DIO_enuSet_Pin_Val+0x1ae>
 714:	cb 01       	movw	r24, r22
 716:	84 2b       	or	r24, r20
 718:	8c 93       	st	X, r24
   			break;
   	   }
   	   Local_enuErrorState=ES_OK;
 71a:	19 82       	std	Y+1, r1	; 0x01
 71c:	02 c0       	rjmp	.+4      	; 0x722 <DIO_enuSet_Pin_Val+0x1c4>
      }
      else
      {
   	   Local_enuErrorState=ES_OUT_OF_RANGE;
 71e:	82 e0       	ldi	r24, 0x02	; 2
 720:	89 83       	std	Y+1, r24	; 0x01
      }

   return Local_enuErrorState;
 722:	89 81       	ldd	r24, Y+1	; 0x01
}
 724:	26 96       	adiw	r28, 0x06	; 6
 726:	0f b6       	in	r0, 0x3f	; 63
 728:	f8 94       	cli
 72a:	de bf       	out	0x3e, r29	; 62
 72c:	0f be       	out	0x3f, r0	; 63
 72e:	cd bf       	out	0x3d, r28	; 61
 730:	cf 91       	pop	r28
 732:	df 91       	pop	r29
 734:	08 95       	ret

00000736 <DIO_enuTog_Pin_Val>:

ES_t DIO_enuTog_Pin_Val(u8 Copy_u8PortID , u8 Copy_u8PinID )
{
 736:	df 93       	push	r29
 738:	cf 93       	push	r28
 73a:	00 d0       	rcall	.+0      	; 0x73c <DIO_enuTog_Pin_Val+0x6>
 73c:	00 d0       	rcall	.+0      	; 0x73e <DIO_enuTog_Pin_Val+0x8>
 73e:	0f 92       	push	r0
 740:	cd b7       	in	r28, 0x3d	; 61
 742:	de b7       	in	r29, 0x3e	; 62
 744:	8a 83       	std	Y+2, r24	; 0x02
 746:	6b 83       	std	Y+3, r22	; 0x03
   ES_t Local_enuErrorState=ES_NOK;
 748:	81 e0       	ldi	r24, 0x01	; 1
 74a:	89 83       	std	Y+1, r24	; 0x01
   if (Copy_u8PortID<=DIO_PORTD && Copy_u8PinID<=DIO_Pin7)
 74c:	8a 81       	ldd	r24, Y+2	; 0x02
 74e:	84 30       	cpi	r24, 0x04	; 4
 750:	08 f0       	brcs	.+2      	; 0x754 <DIO_enuTog_Pin_Val+0x1e>
 752:	74 c0       	rjmp	.+232    	; 0x83c <DIO_enuTog_Pin_Val+0x106>
 754:	8b 81       	ldd	r24, Y+3	; 0x03
 756:	88 30       	cpi	r24, 0x08	; 8
 758:	08 f0       	brcs	.+2      	; 0x75c <DIO_enuTog_Pin_Val+0x26>
 75a:	70 c0       	rjmp	.+224    	; 0x83c <DIO_enuTog_Pin_Val+0x106>
	 {
	   switch (Copy_u8PortID)
 75c:	8a 81       	ldd	r24, Y+2	; 0x02
 75e:	28 2f       	mov	r18, r24
 760:	30 e0       	ldi	r19, 0x00	; 0
 762:	3d 83       	std	Y+5, r19	; 0x05
 764:	2c 83       	std	Y+4, r18	; 0x04
 766:	8c 81       	ldd	r24, Y+4	; 0x04
 768:	9d 81       	ldd	r25, Y+5	; 0x05
 76a:	81 30       	cpi	r24, 0x01	; 1
 76c:	91 05       	cpc	r25, r1
 76e:	49 f1       	breq	.+82     	; 0x7c2 <DIO_enuTog_Pin_Val+0x8c>
 770:	2c 81       	ldd	r18, Y+4	; 0x04
 772:	3d 81       	ldd	r19, Y+5	; 0x05
 774:	22 30       	cpi	r18, 0x02	; 2
 776:	31 05       	cpc	r19, r1
 778:	2c f4       	brge	.+10     	; 0x784 <DIO_enuTog_Pin_Val+0x4e>
 77a:	8c 81       	ldd	r24, Y+4	; 0x04
 77c:	9d 81       	ldd	r25, Y+5	; 0x05
 77e:	00 97       	sbiw	r24, 0x00	; 0
 780:	61 f0       	breq	.+24     	; 0x79a <DIO_enuTog_Pin_Val+0x64>
 782:	5a c0       	rjmp	.+180    	; 0x838 <DIO_enuTog_Pin_Val+0x102>
 784:	2c 81       	ldd	r18, Y+4	; 0x04
 786:	3d 81       	ldd	r19, Y+5	; 0x05
 788:	22 30       	cpi	r18, 0x02	; 2
 78a:	31 05       	cpc	r19, r1
 78c:	71 f1       	breq	.+92     	; 0x7ea <DIO_enuTog_Pin_Val+0xb4>
 78e:	8c 81       	ldd	r24, Y+4	; 0x04
 790:	9d 81       	ldd	r25, Y+5	; 0x05
 792:	83 30       	cpi	r24, 0x03	; 3
 794:	91 05       	cpc	r25, r1
 796:	e9 f1       	breq	.+122    	; 0x812 <DIO_enuTog_Pin_Val+0xdc>
 798:	4f c0       	rjmp	.+158    	; 0x838 <DIO_enuTog_Pin_Val+0x102>
	   {
		  case DIO_PORTA:
			PORTA^=(1<<Copy_u8PinID);
 79a:	ab e3       	ldi	r26, 0x3B	; 59
 79c:	b0 e0       	ldi	r27, 0x00	; 0
 79e:	eb e3       	ldi	r30, 0x3B	; 59
 7a0:	f0 e0       	ldi	r31, 0x00	; 0
 7a2:	80 81       	ld	r24, Z
 7a4:	48 2f       	mov	r20, r24
 7a6:	8b 81       	ldd	r24, Y+3	; 0x03
 7a8:	28 2f       	mov	r18, r24
 7aa:	30 e0       	ldi	r19, 0x00	; 0
 7ac:	81 e0       	ldi	r24, 0x01	; 1
 7ae:	90 e0       	ldi	r25, 0x00	; 0
 7b0:	02 2e       	mov	r0, r18
 7b2:	02 c0       	rjmp	.+4      	; 0x7b8 <DIO_enuTog_Pin_Val+0x82>
 7b4:	88 0f       	add	r24, r24
 7b6:	99 1f       	adc	r25, r25
 7b8:	0a 94       	dec	r0
 7ba:	e2 f7       	brpl	.-8      	; 0x7b4 <DIO_enuTog_Pin_Val+0x7e>
 7bc:	84 27       	eor	r24, r20
 7be:	8c 93       	st	X, r24
 7c0:	3b c0       	rjmp	.+118    	; 0x838 <DIO_enuTog_Pin_Val+0x102>
			break;
		  case DIO_PORTB:
			PORTB^=(1<<Copy_u8PinID);
 7c2:	a8 e3       	ldi	r26, 0x38	; 56
 7c4:	b0 e0       	ldi	r27, 0x00	; 0
 7c6:	e8 e3       	ldi	r30, 0x38	; 56
 7c8:	f0 e0       	ldi	r31, 0x00	; 0
 7ca:	80 81       	ld	r24, Z
 7cc:	48 2f       	mov	r20, r24
 7ce:	8b 81       	ldd	r24, Y+3	; 0x03
 7d0:	28 2f       	mov	r18, r24
 7d2:	30 e0       	ldi	r19, 0x00	; 0
 7d4:	81 e0       	ldi	r24, 0x01	; 1
 7d6:	90 e0       	ldi	r25, 0x00	; 0
 7d8:	02 2e       	mov	r0, r18
 7da:	02 c0       	rjmp	.+4      	; 0x7e0 <DIO_enuTog_Pin_Val+0xaa>
 7dc:	88 0f       	add	r24, r24
 7de:	99 1f       	adc	r25, r25
 7e0:	0a 94       	dec	r0
 7e2:	e2 f7       	brpl	.-8      	; 0x7dc <DIO_enuTog_Pin_Val+0xa6>
 7e4:	84 27       	eor	r24, r20
 7e6:	8c 93       	st	X, r24
 7e8:	27 c0       	rjmp	.+78     	; 0x838 <DIO_enuTog_Pin_Val+0x102>
			break;
		  case DIO_PORTC:
			PORTC^=(1<<Copy_u8PinID);
 7ea:	a5 e3       	ldi	r26, 0x35	; 53
 7ec:	b0 e0       	ldi	r27, 0x00	; 0
 7ee:	e5 e3       	ldi	r30, 0x35	; 53
 7f0:	f0 e0       	ldi	r31, 0x00	; 0
 7f2:	80 81       	ld	r24, Z
 7f4:	48 2f       	mov	r20, r24
 7f6:	8b 81       	ldd	r24, Y+3	; 0x03
 7f8:	28 2f       	mov	r18, r24
 7fa:	30 e0       	ldi	r19, 0x00	; 0
 7fc:	81 e0       	ldi	r24, 0x01	; 1
 7fe:	90 e0       	ldi	r25, 0x00	; 0
 800:	02 2e       	mov	r0, r18
 802:	02 c0       	rjmp	.+4      	; 0x808 <DIO_enuTog_Pin_Val+0xd2>
 804:	88 0f       	add	r24, r24
 806:	99 1f       	adc	r25, r25
 808:	0a 94       	dec	r0
 80a:	e2 f7       	brpl	.-8      	; 0x804 <DIO_enuTog_Pin_Val+0xce>
 80c:	84 27       	eor	r24, r20
 80e:	8c 93       	st	X, r24
 810:	13 c0       	rjmp	.+38     	; 0x838 <DIO_enuTog_Pin_Val+0x102>
			break;
		  case DIO_PORTD:
			PORTD^=(1<<Copy_u8PinID);
 812:	a2 e3       	ldi	r26, 0x32	; 50
 814:	b0 e0       	ldi	r27, 0x00	; 0
 816:	e2 e3       	ldi	r30, 0x32	; 50
 818:	f0 e0       	ldi	r31, 0x00	; 0
 81a:	80 81       	ld	r24, Z
 81c:	48 2f       	mov	r20, r24
 81e:	8b 81       	ldd	r24, Y+3	; 0x03
 820:	28 2f       	mov	r18, r24
 822:	30 e0       	ldi	r19, 0x00	; 0
 824:	81 e0       	ldi	r24, 0x01	; 1
 826:	90 e0       	ldi	r25, 0x00	; 0
 828:	02 2e       	mov	r0, r18
 82a:	02 c0       	rjmp	.+4      	; 0x830 <DIO_enuTog_Pin_Val+0xfa>
 82c:	88 0f       	add	r24, r24
 82e:	99 1f       	adc	r25, r25
 830:	0a 94       	dec	r0
 832:	e2 f7       	brpl	.-8      	; 0x82c <DIO_enuTog_Pin_Val+0xf6>
 834:	84 27       	eor	r24, r20
 836:	8c 93       	st	X, r24
			break;
	   }
	   Local_enuErrorState=ES_OK;
 838:	19 82       	std	Y+1, r1	; 0x01
 83a:	02 c0       	rjmp	.+4      	; 0x840 <DIO_enuTog_Pin_Val+0x10a>
         }
         else
         {
      	   Local_enuErrorState=ES_OUT_OF_RANGE;
 83c:	82 e0       	ldi	r24, 0x02	; 2
 83e:	89 83       	std	Y+1, r24	; 0x01
         }

   return Local_enuErrorState;
 840:	89 81       	ldd	r24, Y+1	; 0x01
}
 842:	0f 90       	pop	r0
 844:	0f 90       	pop	r0
 846:	0f 90       	pop	r0
 848:	0f 90       	pop	r0
 84a:	0f 90       	pop	r0
 84c:	cf 91       	pop	r28
 84e:	df 91       	pop	r29
 850:	08 95       	ret

00000852 <DIO_Get_Pin_Val>:

ES_t DIO_Get_Pin_Val(u8 Copy_u8PortID , u8 Copy_u8PinID , u8 *Copy_u8Value)
{
 852:	df 93       	push	r29
 854:	cf 93       	push	r28
 856:	cd b7       	in	r28, 0x3d	; 61
 858:	de b7       	in	r29, 0x3e	; 62
 85a:	27 97       	sbiw	r28, 0x07	; 7
 85c:	0f b6       	in	r0, 0x3f	; 63
 85e:	f8 94       	cli
 860:	de bf       	out	0x3e, r29	; 62
 862:	0f be       	out	0x3f, r0	; 63
 864:	cd bf       	out	0x3d, r28	; 61
 866:	8a 83       	std	Y+2, r24	; 0x02
 868:	6b 83       	std	Y+3, r22	; 0x03
 86a:	5d 83       	std	Y+5, r21	; 0x05
 86c:	4c 83       	std	Y+4, r20	; 0x04
   ES_t Local_enuErrorState=ES_NOK;
 86e:	81 e0       	ldi	r24, 0x01	; 1
 870:	89 83       	std	Y+1, r24	; 0x01

   if (Copy_u8Value!=NULL)
 872:	8c 81       	ldd	r24, Y+4	; 0x04
 874:	9d 81       	ldd	r25, Y+5	; 0x05
 876:	00 97       	sbiw	r24, 0x00	; 0
 878:	09 f4       	brne	.+2      	; 0x87c <__stack+0x1d>
 87a:	7d c0       	rjmp	.+250    	; 0x976 <__stack+0x117>
   {
	   if (Copy_u8PortID<=DIO_PORTD && Copy_u8PinID<=DIO_Pin7)
 87c:	8a 81       	ldd	r24, Y+2	; 0x02
 87e:	84 30       	cpi	r24, 0x04	; 4
 880:	08 f0       	brcs	.+2      	; 0x884 <__stack+0x25>
 882:	76 c0       	rjmp	.+236    	; 0x970 <__stack+0x111>
 884:	8b 81       	ldd	r24, Y+3	; 0x03
 886:	88 30       	cpi	r24, 0x08	; 8
 888:	08 f0       	brcs	.+2      	; 0x88c <__stack+0x2d>
 88a:	72 c0       	rjmp	.+228    	; 0x970 <__stack+0x111>
	   	{
	   	   switch (Copy_u8PortID)
 88c:	8a 81       	ldd	r24, Y+2	; 0x02
 88e:	28 2f       	mov	r18, r24
 890:	30 e0       	ldi	r19, 0x00	; 0
 892:	3f 83       	std	Y+7, r19	; 0x07
 894:	2e 83       	std	Y+6, r18	; 0x06
 896:	4e 81       	ldd	r20, Y+6	; 0x06
 898:	5f 81       	ldd	r21, Y+7	; 0x07
 89a:	41 30       	cpi	r20, 0x01	; 1
 89c:	51 05       	cpc	r21, r1
 89e:	59 f1       	breq	.+86     	; 0x8f6 <__stack+0x97>
 8a0:	8e 81       	ldd	r24, Y+6	; 0x06
 8a2:	9f 81       	ldd	r25, Y+7	; 0x07
 8a4:	82 30       	cpi	r24, 0x02	; 2
 8a6:	91 05       	cpc	r25, r1
 8a8:	34 f4       	brge	.+12     	; 0x8b6 <__stack+0x57>
 8aa:	2e 81       	ldd	r18, Y+6	; 0x06
 8ac:	3f 81       	ldd	r19, Y+7	; 0x07
 8ae:	21 15       	cp	r18, r1
 8b0:	31 05       	cpc	r19, r1
 8b2:	69 f0       	breq	.+26     	; 0x8ce <__stack+0x6f>
 8b4:	5b c0       	rjmp	.+182    	; 0x96c <__stack+0x10d>
 8b6:	4e 81       	ldd	r20, Y+6	; 0x06
 8b8:	5f 81       	ldd	r21, Y+7	; 0x07
 8ba:	42 30       	cpi	r20, 0x02	; 2
 8bc:	51 05       	cpc	r21, r1
 8be:	79 f1       	breq	.+94     	; 0x91e <__stack+0xbf>
 8c0:	8e 81       	ldd	r24, Y+6	; 0x06
 8c2:	9f 81       	ldd	r25, Y+7	; 0x07
 8c4:	83 30       	cpi	r24, 0x03	; 3
 8c6:	91 05       	cpc	r25, r1
 8c8:	09 f4       	brne	.+2      	; 0x8cc <__stack+0x6d>
 8ca:	3d c0       	rjmp	.+122    	; 0x946 <__stack+0xe7>
 8cc:	4f c0       	rjmp	.+158    	; 0x96c <__stack+0x10d>
	   	   {
	   		  case DIO_PORTA:
	   			 *Copy_u8Value=((PINA>>Copy_u8PinID)&1);
 8ce:	e9 e3       	ldi	r30, 0x39	; 57
 8d0:	f0 e0       	ldi	r31, 0x00	; 0
 8d2:	80 81       	ld	r24, Z
 8d4:	28 2f       	mov	r18, r24
 8d6:	30 e0       	ldi	r19, 0x00	; 0
 8d8:	8b 81       	ldd	r24, Y+3	; 0x03
 8da:	88 2f       	mov	r24, r24
 8dc:	90 e0       	ldi	r25, 0x00	; 0
 8de:	a9 01       	movw	r20, r18
 8e0:	02 c0       	rjmp	.+4      	; 0x8e6 <__stack+0x87>
 8e2:	55 95       	asr	r21
 8e4:	47 95       	ror	r20
 8e6:	8a 95       	dec	r24
 8e8:	e2 f7       	brpl	.-8      	; 0x8e2 <__stack+0x83>
 8ea:	ca 01       	movw	r24, r20
 8ec:	81 70       	andi	r24, 0x01	; 1
 8ee:	ec 81       	ldd	r30, Y+4	; 0x04
 8f0:	fd 81       	ldd	r31, Y+5	; 0x05
 8f2:	80 83       	st	Z, r24
 8f4:	3b c0       	rjmp	.+118    	; 0x96c <__stack+0x10d>
	   			break;
	   		  case DIO_PORTB:
	   			 *Copy_u8Value=((PINB>>Copy_u8PinID)&1);
 8f6:	e6 e3       	ldi	r30, 0x36	; 54
 8f8:	f0 e0       	ldi	r31, 0x00	; 0
 8fa:	80 81       	ld	r24, Z
 8fc:	28 2f       	mov	r18, r24
 8fe:	30 e0       	ldi	r19, 0x00	; 0
 900:	8b 81       	ldd	r24, Y+3	; 0x03
 902:	88 2f       	mov	r24, r24
 904:	90 e0       	ldi	r25, 0x00	; 0
 906:	a9 01       	movw	r20, r18
 908:	02 c0       	rjmp	.+4      	; 0x90e <__stack+0xaf>
 90a:	55 95       	asr	r21
 90c:	47 95       	ror	r20
 90e:	8a 95       	dec	r24
 910:	e2 f7       	brpl	.-8      	; 0x90a <__stack+0xab>
 912:	ca 01       	movw	r24, r20
 914:	81 70       	andi	r24, 0x01	; 1
 916:	ec 81       	ldd	r30, Y+4	; 0x04
 918:	fd 81       	ldd	r31, Y+5	; 0x05
 91a:	80 83       	st	Z, r24
 91c:	27 c0       	rjmp	.+78     	; 0x96c <__stack+0x10d>
	   			break;
	   		  case DIO_PORTC:
	   			 *Copy_u8Value=((PINC>>Copy_u8PinID)&1);
 91e:	e3 e3       	ldi	r30, 0x33	; 51
 920:	f0 e0       	ldi	r31, 0x00	; 0
 922:	80 81       	ld	r24, Z
 924:	28 2f       	mov	r18, r24
 926:	30 e0       	ldi	r19, 0x00	; 0
 928:	8b 81       	ldd	r24, Y+3	; 0x03
 92a:	88 2f       	mov	r24, r24
 92c:	90 e0       	ldi	r25, 0x00	; 0
 92e:	a9 01       	movw	r20, r18
 930:	02 c0       	rjmp	.+4      	; 0x936 <__stack+0xd7>
 932:	55 95       	asr	r21
 934:	47 95       	ror	r20
 936:	8a 95       	dec	r24
 938:	e2 f7       	brpl	.-8      	; 0x932 <__stack+0xd3>
 93a:	ca 01       	movw	r24, r20
 93c:	81 70       	andi	r24, 0x01	; 1
 93e:	ec 81       	ldd	r30, Y+4	; 0x04
 940:	fd 81       	ldd	r31, Y+5	; 0x05
 942:	80 83       	st	Z, r24
 944:	13 c0       	rjmp	.+38     	; 0x96c <__stack+0x10d>
	   			break;
	   		  case DIO_PORTD:
	   			 *Copy_u8Value=((PIND>>Copy_u8PinID)&1);
 946:	e0 e3       	ldi	r30, 0x30	; 48
 948:	f0 e0       	ldi	r31, 0x00	; 0
 94a:	80 81       	ld	r24, Z
 94c:	28 2f       	mov	r18, r24
 94e:	30 e0       	ldi	r19, 0x00	; 0
 950:	8b 81       	ldd	r24, Y+3	; 0x03
 952:	88 2f       	mov	r24, r24
 954:	90 e0       	ldi	r25, 0x00	; 0
 956:	a9 01       	movw	r20, r18
 958:	02 c0       	rjmp	.+4      	; 0x95e <__stack+0xff>
 95a:	55 95       	asr	r21
 95c:	47 95       	ror	r20
 95e:	8a 95       	dec	r24
 960:	e2 f7       	brpl	.-8      	; 0x95a <__stack+0xfb>
 962:	ca 01       	movw	r24, r20
 964:	81 70       	andi	r24, 0x01	; 1
 966:	ec 81       	ldd	r30, Y+4	; 0x04
 968:	fd 81       	ldd	r31, Y+5	; 0x05
 96a:	80 83       	st	Z, r24
	   			break;
	   	   }
	   	   Local_enuErrorState=ES_OK;
 96c:	19 82       	std	Y+1, r1	; 0x01
 96e:	05 c0       	rjmp	.+10     	; 0x97a <__stack+0x11b>
	   		}
	   		else
	   		{
	   		   Local_enuErrorState=ES_OUT_OF_RANGE;
 970:	82 e0       	ldi	r24, 0x02	; 2
 972:	89 83       	std	Y+1, r24	; 0x01
 974:	02 c0       	rjmp	.+4      	; 0x97a <__stack+0x11b>


   }
   else
   {
	   Local_enuErrorState=ES_NULL_POINTER;
 976:	83 e0       	ldi	r24, 0x03	; 3
 978:	89 83       	std	Y+1, r24	; 0x01
   }

   return Local_enuErrorState;
 97a:	89 81       	ldd	r24, Y+1	; 0x01
}
 97c:	27 96       	adiw	r28, 0x07	; 7
 97e:	0f b6       	in	r0, 0x3f	; 63
 980:	f8 94       	cli
 982:	de bf       	out	0x3e, r29	; 62
 984:	0f be       	out	0x3f, r0	; 63
 986:	cd bf       	out	0x3d, r28	; 61
 988:	cf 91       	pop	r28
 98a:	df 91       	pop	r29
 98c:	08 95       	ret

0000098e <main>:



extern SW_t Switch_AstrSwitchState [SWITCH_NUM ];
int main(void)
{
 98e:	df 93       	push	r29
 990:	cf 93       	push	r28
 992:	0f 92       	push	r0
 994:	cd b7       	in	r28, 0x3d	; 61
 996:	de b7       	in	r29, 0x3e	; 62

	DIO_enuInit();
 998:	0e 94 41 00 	call	0x82	; 0x82 <DIO_enuInit>
    Switch_enuInit(Switch_AstrSwitchState);
 99c:	80 e6       	ldi	r24, 0x60	; 96
 99e:	90 e0       	ldi	r25, 0x00	; 0
 9a0:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <Switch_enuInit>
    u8 pinstate;

	while (1)
	{
			Switch_GetState(&Switch_AstrSwitchState[0],&pinstate);
 9a4:	80 e6       	ldi	r24, 0x60	; 96
 9a6:	90 e0       	ldi	r25, 0x00	; 0
 9a8:	9e 01       	movw	r18, r28
 9aa:	2f 5f       	subi	r18, 0xFF	; 255
 9ac:	3f 4f       	sbci	r19, 0xFF	; 255
 9ae:	b9 01       	movw	r22, r18
 9b0:	0e 94 5f 05 	call	0xabe	; 0xabe <Switch_GetState>
			if (pinstate==0)
 9b4:	89 81       	ldd	r24, Y+1	; 0x01
 9b6:	88 23       	and	r24, r24
 9b8:	31 f4       	brne	.+12     	; 0x9c6 <main+0x38>
			{
			   DIO_enuSet_Pin_Val(DIO_PORTB,DIO_Pin0,DIO_u8HIGH);
 9ba:	81 e0       	ldi	r24, 0x01	; 1
 9bc:	60 e0       	ldi	r22, 0x00	; 0
 9be:	41 e0       	ldi	r20, 0x01	; 1
 9c0:	0e 94 af 02 	call	0x55e	; 0x55e <DIO_enuSet_Pin_Val>
 9c4:	ef cf       	rjmp	.-34     	; 0x9a4 <main+0x16>
			}
			else
			{
				 DIO_enuSet_Pin_Val(DIO_PORTB,DIO_Pin0,DIO_u8LOW);
 9c6:	81 e0       	ldi	r24, 0x01	; 1
 9c8:	60 e0       	ldi	r22, 0x00	; 0
 9ca:	40 e0       	ldi	r20, 0x00	; 0
 9cc:	0e 94 af 02 	call	0x55e	; 0x55e <DIO_enuSet_Pin_Val>
 9d0:	e9 cf       	rjmp	.-46     	; 0x9a4 <main+0x16>

000009d2 <Switch_enuInit>:

#include "DIO_int.h"


ES_t Switch_enuInit(SW_t *Copy_Ar_str_Switch)
{
 9d2:	df 93       	push	r29
 9d4:	cf 93       	push	r28
 9d6:	00 d0       	rcall	.+0      	; 0x9d8 <Switch_enuInit+0x6>
 9d8:	00 d0       	rcall	.+0      	; 0x9da <Switch_enuInit+0x8>
 9da:	cd b7       	in	r28, 0x3d	; 61
 9dc:	de b7       	in	r29, 0x3e	; 62
 9de:	9c 83       	std	Y+4, r25	; 0x04
 9e0:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState =ES_NOK;
 9e2:	81 e0       	ldi	r24, 0x01	; 1
 9e4:	8a 83       	std	Y+2, r24	; 0x02
	if (Copy_Ar_str_Switch != NULL)
 9e6:	8b 81       	ldd	r24, Y+3	; 0x03
 9e8:	9c 81       	ldd	r25, Y+4	; 0x04
 9ea:	00 97       	sbiw	r24, 0x00	; 0
 9ec:	09 f4       	brne	.+2      	; 0x9f0 <Switch_enuInit+0x1e>
 9ee:	5d c0       	rjmp	.+186    	; 0xaaa <Switch_enuInit+0xd8>
	{
		u8 Local_Iterator =0;
 9f0:	19 82       	std	Y+1, r1	; 0x01
		for (Local_Iterator=0;Local_Iterator<SWITCH_NUM;Local_Iterator++)
 9f2:	19 82       	std	Y+1, r1	; 0x01
 9f4:	55 c0       	rjmp	.+170    	; 0xaa0 <Switch_enuInit+0xce>
		{
				Local_enuErrorState=DIO_enuSet_Pin_Dir(Copy_Ar_str_Switch[Local_Iterator].SW_PortID,Copy_Ar_str_Switch[Local_Iterator].SW_PinID,DIO_u8INPUT);
 9f6:	89 81       	ldd	r24, Y+1	; 0x01
 9f8:	28 2f       	mov	r18, r24
 9fa:	30 e0       	ldi	r19, 0x00	; 0
 9fc:	c9 01       	movw	r24, r18
 9fe:	88 0f       	add	r24, r24
 a00:	99 1f       	adc	r25, r25
 a02:	28 0f       	add	r18, r24
 a04:	39 1f       	adc	r19, r25
 a06:	8b 81       	ldd	r24, Y+3	; 0x03
 a08:	9c 81       	ldd	r25, Y+4	; 0x04
 a0a:	fc 01       	movw	r30, r24
 a0c:	e2 0f       	add	r30, r18
 a0e:	f3 1f       	adc	r31, r19
 a10:	40 81       	ld	r20, Z
 a12:	89 81       	ldd	r24, Y+1	; 0x01
 a14:	28 2f       	mov	r18, r24
 a16:	30 e0       	ldi	r19, 0x00	; 0
 a18:	c9 01       	movw	r24, r18
 a1a:	88 0f       	add	r24, r24
 a1c:	99 1f       	adc	r25, r25
 a1e:	28 0f       	add	r18, r24
 a20:	39 1f       	adc	r19, r25
 a22:	8b 81       	ldd	r24, Y+3	; 0x03
 a24:	9c 81       	ldd	r25, Y+4	; 0x04
 a26:	fc 01       	movw	r30, r24
 a28:	e2 0f       	add	r30, r18
 a2a:	f3 1f       	adc	r31, r19
 a2c:	91 81       	ldd	r25, Z+1	; 0x01
 a2e:	84 2f       	mov	r24, r20
 a30:	69 2f       	mov	r22, r25
 a32:	40 e0       	ldi	r20, 0x00	; 0
 a34:	0e 94 c3 01 	call	0x386	; 0x386 <DIO_enuSet_Pin_Dir>
 a38:	8a 83       	std	Y+2, r24	; 0x02
				Local_enuErrorState=DIO_enuSet_Pin_Val(Copy_Ar_str_Switch[Local_Iterator].SW_PortID,Copy_Ar_str_Switch[Local_Iterator].SW_PinID,Copy_Ar_str_Switch[Local_Iterator].SW_status);
 a3a:	89 81       	ldd	r24, Y+1	; 0x01
 a3c:	28 2f       	mov	r18, r24
 a3e:	30 e0       	ldi	r19, 0x00	; 0
 a40:	c9 01       	movw	r24, r18
 a42:	88 0f       	add	r24, r24
 a44:	99 1f       	adc	r25, r25
 a46:	28 0f       	add	r18, r24
 a48:	39 1f       	adc	r19, r25
 a4a:	8b 81       	ldd	r24, Y+3	; 0x03
 a4c:	9c 81       	ldd	r25, Y+4	; 0x04
 a4e:	fc 01       	movw	r30, r24
 a50:	e2 0f       	add	r30, r18
 a52:	f3 1f       	adc	r31, r19
 a54:	50 81       	ld	r21, Z
 a56:	89 81       	ldd	r24, Y+1	; 0x01
 a58:	28 2f       	mov	r18, r24
 a5a:	30 e0       	ldi	r19, 0x00	; 0
 a5c:	c9 01       	movw	r24, r18
 a5e:	88 0f       	add	r24, r24
 a60:	99 1f       	adc	r25, r25
 a62:	28 0f       	add	r18, r24
 a64:	39 1f       	adc	r19, r25
 a66:	8b 81       	ldd	r24, Y+3	; 0x03
 a68:	9c 81       	ldd	r25, Y+4	; 0x04
 a6a:	fc 01       	movw	r30, r24
 a6c:	e2 0f       	add	r30, r18
 a6e:	f3 1f       	adc	r31, r19
 a70:	41 81       	ldd	r20, Z+1	; 0x01
 a72:	89 81       	ldd	r24, Y+1	; 0x01
 a74:	28 2f       	mov	r18, r24
 a76:	30 e0       	ldi	r19, 0x00	; 0
 a78:	c9 01       	movw	r24, r18
 a7a:	88 0f       	add	r24, r24
 a7c:	99 1f       	adc	r25, r25
 a7e:	28 0f       	add	r18, r24
 a80:	39 1f       	adc	r19, r25
 a82:	8b 81       	ldd	r24, Y+3	; 0x03
 a84:	9c 81       	ldd	r25, Y+4	; 0x04
 a86:	fc 01       	movw	r30, r24
 a88:	e2 0f       	add	r30, r18
 a8a:	f3 1f       	adc	r31, r19
 a8c:	92 81       	ldd	r25, Z+2	; 0x02
 a8e:	85 2f       	mov	r24, r21
 a90:	64 2f       	mov	r22, r20
 a92:	49 2f       	mov	r20, r25
 a94:	0e 94 af 02 	call	0x55e	; 0x55e <DIO_enuSet_Pin_Val>
 a98:	8a 83       	std	Y+2, r24	; 0x02
{
	ES_t Local_enuErrorState =ES_NOK;
	if (Copy_Ar_str_Switch != NULL)
	{
		u8 Local_Iterator =0;
		for (Local_Iterator=0;Local_Iterator<SWITCH_NUM;Local_Iterator++)
 a9a:	89 81       	ldd	r24, Y+1	; 0x01
 a9c:	8f 5f       	subi	r24, 0xFF	; 255
 a9e:	89 83       	std	Y+1, r24	; 0x01
 aa0:	89 81       	ldd	r24, Y+1	; 0x01
 aa2:	83 30       	cpi	r24, 0x03	; 3
 aa4:	08 f4       	brcc	.+2      	; 0xaa8 <Switch_enuInit+0xd6>
 aa6:	a7 cf       	rjmp	.-178    	; 0x9f6 <Switch_enuInit+0x24>
 aa8:	02 c0       	rjmp	.+4      	; 0xaae <Switch_enuInit+0xdc>

		}
	}
	else
	{
		Local_enuErrorState =ES_NULL_POINTER;
 aaa:	83 e0       	ldi	r24, 0x03	; 3
 aac:	8a 83       	std	Y+2, r24	; 0x02
	}

	return Local_enuErrorState;
 aae:	8a 81       	ldd	r24, Y+2	; 0x02
}
 ab0:	0f 90       	pop	r0
 ab2:	0f 90       	pop	r0
 ab4:	0f 90       	pop	r0
 ab6:	0f 90       	pop	r0
 ab8:	cf 91       	pop	r28
 aba:	df 91       	pop	r29
 abc:	08 95       	ret

00000abe <Switch_GetState>:

ES_t Switch_GetState(SW_t *Copy_Ar_str_Switch , u8 *Copy_pu8Switchstate){
 abe:	df 93       	push	r29
 ac0:	cf 93       	push	r28
 ac2:	00 d0       	rcall	.+0      	; 0xac4 <Switch_GetState+0x6>
 ac4:	00 d0       	rcall	.+0      	; 0xac6 <Switch_GetState+0x8>
 ac6:	0f 92       	push	r0
 ac8:	cd b7       	in	r28, 0x3d	; 61
 aca:	de b7       	in	r29, 0x3e	; 62
 acc:	9b 83       	std	Y+3, r25	; 0x03
 ace:	8a 83       	std	Y+2, r24	; 0x02
 ad0:	7d 83       	std	Y+5, r23	; 0x05
 ad2:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState =ES_NOK;
 ad4:	81 e0       	ldi	r24, 0x01	; 1
 ad6:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_Ar_str_Switch!=NULL && Copy_pu8Switchstate!=NULL)
 ad8:	8a 81       	ldd	r24, Y+2	; 0x02
 ada:	9b 81       	ldd	r25, Y+3	; 0x03
 adc:	00 97       	sbiw	r24, 0x00	; 0
 ade:	91 f0       	breq	.+36     	; 0xb04 <Switch_GetState+0x46>
 ae0:	8c 81       	ldd	r24, Y+4	; 0x04
 ae2:	9d 81       	ldd	r25, Y+5	; 0x05
 ae4:	00 97       	sbiw	r24, 0x00	; 0
 ae6:	71 f0       	breq	.+28     	; 0xb04 <Switch_GetState+0x46>
	{
		Local_enuErrorState=DIO_Get_Pin_Val(Copy_Ar_str_Switch->SW_PortID,Copy_Ar_str_Switch->SW_PinID,Copy_pu8Switchstate);
 ae8:	ea 81       	ldd	r30, Y+2	; 0x02
 aea:	fb 81       	ldd	r31, Y+3	; 0x03
 aec:	80 81       	ld	r24, Z
 aee:	ea 81       	ldd	r30, Y+2	; 0x02
 af0:	fb 81       	ldd	r31, Y+3	; 0x03
 af2:	91 81       	ldd	r25, Z+1	; 0x01
 af4:	2c 81       	ldd	r18, Y+4	; 0x04
 af6:	3d 81       	ldd	r19, Y+5	; 0x05
 af8:	69 2f       	mov	r22, r25
 afa:	a9 01       	movw	r20, r18
 afc:	0e 94 29 04 	call	0x852	; 0x852 <DIO_Get_Pin_Val>
 b00:	89 83       	std	Y+1, r24	; 0x01
 b02:	02 c0       	rjmp	.+4      	; 0xb08 <Switch_GetState+0x4a>
	}
	else
	{
		Local_enuErrorState=ES_NULL_POINTER;
 b04:	83 e0       	ldi	r24, 0x03	; 3
 b06:	89 83       	std	Y+1, r24	; 0x01
	}



	return Local_enuErrorState;
 b08:	89 81       	ldd	r24, Y+1	; 0x01
}
 b0a:	0f 90       	pop	r0
 b0c:	0f 90       	pop	r0
 b0e:	0f 90       	pop	r0
 b10:	0f 90       	pop	r0
 b12:	0f 90       	pop	r0
 b14:	cf 91       	pop	r28
 b16:	df 91       	pop	r29
 b18:	08 95       	ret

00000b1a <_exit>:
 b1a:	f8 94       	cli

00000b1c <__stop_program>:
 b1c:	ff cf       	rjmp	.-2      	; 0xb1c <__stop_program>
